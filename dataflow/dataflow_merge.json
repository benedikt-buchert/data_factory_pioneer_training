{
	"name": "dataflow_merge",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "postgres",
						"type": "DatasetReference"
					},
					"name": "retail"
				},
				{
					"dataset": {
						"referenceName": "KEY_SKU",
						"type": "DatasetReference"
					},
					"name": "SKU"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "blob_parquet",
						"type": "DatasetReference"
					},
					"name": "writeData",
					"rejectedDataLinkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "leftJoin"
				},
				{
					"name": "removeTimestamps"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          stock_code as string,",
				"          invoice_no as string,",
				"          created_at as timestamp,",
				"          modified_at as timestamp,",
				"          invoice_date as date,",
				"          quantity as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT * FROM retail',",
				"     format: 'query') ~> retail",
				"source(output(",
				"          {Product SKU} as string,",
				"          StockCode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SKU",
				"retail, SKU join(stock_code == StockCode,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftJoin",
				"leftJoin select(mapColumn(",
				"          stock_code,",
				"          invoice_no,",
				"          invoice_date,",
				"          quantity,",
				"          product_sku = {Product SKU}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeTimestamps",
				"removeTimestamps sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> writeData"
			]
		}
	}
}